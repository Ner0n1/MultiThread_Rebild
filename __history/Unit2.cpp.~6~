//---------------------------------------------------------------------------

#include <System.hpp>
#pragma hdrstop

#include "Unit1.h"
#include "Unit2.h"
#include "Unit3.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------

//   Important: Methods and properties of objects in VCL can only be
//   used in a method called using Synchronize, for example:
//
//      Synchronize(&UpdateCaption);
//
//   where UpdateCaption could look like:
//
//      void __fastcall Read_T::UpdateCaption()
//      {
//        Form1->Caption = "Updated in a thread";
//      }
//---------------------------------------------------------------------------

void __fastcall Read_T::Error(const wchar_t error_text)
{
	Form1 -> Label1 -> Caption = error_text;
}

__fastcall Read_T::Read_T(bool CreateSuspended)
	: TThread(CreateSuspended)
{
	DWORD block_size = (Form1 -> Edit1 -> Text).ToInt()*1024;
	if (block_size < 512)
	{
		Synchronize(&Error(L"Block chould be more than 512 bytes"));
		return;
	}
	WCHAR name = strstr(L"////.//" + (Form1 -> Edit2 -> Text).c_str);

	FreeOnTerminate = true;
	Event = new TEvent(NULL, true, false, "", false);
}
//---------------------------------------------------------------------------
void __fastcall Read_T::Execute()
{
	HANDLE Handle = CreateFileW(name, GENERIC_READ,
	FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
	if (Handle == INVALID_HANDLE_VALUE)
	{
	   Synchronize(&Error(L"Can't open disk!"));
	   return void();
	}
	LARGE_INTEGER Offset;
	Offset.QuadPart = 0;
	unsigned long Pos = SetFilePointer(Handle, Offset.LowPart,
	&Offset.HighPart, FILE_BEGIN);
	if (Pos != Offset.LowPart)
	{
	   CloseHandle(Handle);
	   Synchronize(&Error(L"Position error!"));
	   return void();
	}

	BYTE *Block = new BYTE[block_size];
	DWORD BytesToRead;

	ProcessThreadPtr = new Write_T(Event, false);
	while (true){
		if (Terminated) {
			 Synchronize(&Error(L"Finished!"));
			break;
		}

		bool ReadBlock = ReadFile(Handle,Block, block_size, &BytesToRead, NULL);
		if (ReadBlock == false || BytesRead != block_size) {
			Synchronize(&Error(L"Can't read block"));
			break;
		}
		Event -> SetEvent();
		while(Event -> WaitFor(0) == wrSignaled){
			Sleep(50);
		}
	}
	CloseHandle(Handle);
	ProcessThreadPtr -> Terminate();
	delete ProcessThreadPtr;
}

//---------------------------------------------------------------------------
